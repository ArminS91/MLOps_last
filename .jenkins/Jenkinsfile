pipeline {
  agent any

  environment {
    AWS_REGION   = "eu-central-1"
    AWS_ACCOUNT_ID = "725537514809"   // replace with your AWS account ID
    ECR_REPO_NAME = "mllast"           // replace with your repo name
    ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    ECR_REPOSITORY = "${ECR_REGISTRY}/${ECR_REPO_NAME}:latest"
  }

  stages {
    stage('Continuous Integration') {
      steps {
        echo "Linting repository"
        echo "Running unit tests"
      }
    }

    stage('Login to ECR') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                          credentialsId: 'aws-creds']]) {
          sh '''
            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin $ECR_REGISTRY
          '''
        }
      }
    }

    stage('Build Image') {
      steps {
        sh 'docker build -t $ECR_REPOSITORY .'
      }
    }

    stage('Push Image') {
      steps {
        sh 'docker push $ECR_REPOSITORY'
      }
    }

    stage('Continuous Deployment') {
      steps {
        sshagent(['ssh_key']) {
          sh '''
            ssh -o StrictHostKeyChecking=no ubuntu@35.158.102.247 '
              cd /home/ubuntu/ &&
              wget -O docker-compose.yml https://raw.githubusercontent.com/ArminS91/MLOps_last/refs/heads/main/docker-compose.yml &&
              export IMAGE_NAME=$ECR_REPOSITORY &&
              aws ecr get-login-password --region us-east-1 \
                | docker login --username AWS --password-stdin $ECR_REGISTRY &&
              docker compose up -d
            '
          '''
        }
      }
    }
  }

  post {
    always {
      sh 'docker system prune -f'
    }
  }
}



"""pipeline {
  agent any
  environment {
    ECR_REPOSITORY = credentials('ECR_REPOSITORY')
    AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
    AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
  }
  
  stages {
    stage('Continuous Integration') {
      steps {
        script {
          echo "Linting repository"
          echo "Running unit tests"
        }
      }
    }

    stage('Login to ECR') {
      steps {
        script {
          sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com'
        }

      }
    }

    stage('Build Image') {
      steps {
        script {
          sh 'docker build -t {ECR_REPOSITORY}:latest .'
        }

      }
    }

    stage('Push Image') {
      steps {
        script {
          sh 'docker push {ECR_REPOSITORY}:latest'
        }

      }
    }

    stage('Continuous Deployment') {
      steps {
        sshagent(['ssh_key']) {
          sh "ssh -o StrictHostKeyChecking=no -l ubuntu 35.158.102.247 'cd /home/ubuntu/ && wget https://raw.githubusercontent.com/ArminS91/MLOps_last/refs/heads/main/docker-compose.yml && export IMAGE_NAME=${ECR_REPOSITORY}:latest && aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com && docker compose up -d '"
        }
      }
    }
  }

  post {
    always {
      sh 'docker system prune -f'
    }
  }
}
"""